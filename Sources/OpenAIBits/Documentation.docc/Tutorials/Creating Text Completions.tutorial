@Tutorial(time: 5) {
    @Intro(title: "Creating Text Completions") {
        Learn how to use the ``OpenAIBits/Text/Completions`` call to generate a completion for a text prompt.
    }
    
    @Section(title: "Make a basic call") {
        @ContentAndMedia {
            The only required parameters for a text completion call are the ``OpenAIBits/Model/ID-swift.struct`` and the text prompt. This will use default values for the remaining parameters, as defined in the [OpenAI API](https://platform.openai.com/docs/api-reference/completions/create). In particular, the number of tokens in the response currently defaults to `16`.  
        }
        
        @Steps {
            @Step {
                Create the ``OpenAIBits/OpenAI`` instance, using your personal Open AI Key.
                
                > Important: It is not recommended to hard-code an API Key into your source code. Instead, store it in the Keychain, a plist, or in an environment variable if working in on a command line app.
                
                @Code(name: "HumptyDumpty.swift", file: "create_openai.swift")
            }
            
            @Step {
                Next, create the ``OpenAIBits/Text/Completions`` call.
                
                @Code(name: "HumptyDumpty.swift", file: "HumptyDumpty_01.swift")
            }
            
            @Step {
              Then, send it to OpenAI.
              
              The method is asynchronous and may throw an error if there is an issue, so we wrap it in a `do`/`catch`.
              
              @Code(name: "HumptyDumpty.swift", file: "HumptyDumpty_02.swift")
            }
            
            @Step {
              Lastly, print the text from the first ``OpenAIBits/Completion/Choice``.
              
              > Note: If a ``OpenAIBits/Completion`` is returned, it should always have at least one value. If you don't set the `'n'` parameter in the call, one value will be returned.
              
              @Code(name: "HumptyDumpty.swift", file: "HumptyDumpty_03.swift")
            }

            @Step {
              However, this is a common situation, so you can access the `text` value of the first choice directly from the ``OpenAIBits/Completion/text`` property.
              
              @Code(name: "HumptyDumpty.swift", file: "HumptyDumpty_04.swift")
            }
        }
    }
        
    @Section(title: "Make a more complex call") {
        @ContentAndMedia {
            Calling the API directly is probably going to be less common. Usually you will have a particular goal in mind, but want user input to make it specific.
            
            In this case, we will build a function that gives us a to-list for accomplishing a user-defined task.
        }
        
        @Steps {            
            @Step {
                This time, let's define a function that will take the task description and return the list as a ``String``.
                
                @Code(name: "ListRequiredSteps.swift", file: "ListRequiredSteps_01.swift")
            }
        }
    }
}
